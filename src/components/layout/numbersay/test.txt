import React, { useState, useEffect, useRef } from "react";
import { makeStyles } from "@material-ui/core/styles";
import Typography from "@material-ui/core/Typography";

const useStyles = makeStyles((theme) => ({
  container: {
    height: "500px",
    overflow: "scroll",
  },
  item: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    height: "100px",
    width: "100%",
    animation: "$fadeIn 0.000001s",
  },
}));

const Counter = ({ end }) => {
  const [count, setCount] = useState(0);
  const [views, setViews] = useState(0);
  const [isCounting, setIsCounting] = useState(false);
  const classes = useStyles();

  const targetRef = useRef();

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        const entry = entries[0];
        if (entry.isIntersecting) {
          setIsCounting(true);
          setCount(0); // Reset the count when the element is in view
          setViews(0);
        }
      },
      { threshold: 0.00001 }
    );

    observer.observe(targetRef.current);

    return () => {
      observer.unobserve(targetRef.current);
    };
  }, []);

  useEffect(() => {
    if (isCounting) {
      let interval = setInterval(() => {
        setCount((prevCount) => prevCount + 1000);
        setViews((prevCount) => prevCount + 10);
      }, 0.0001);
      if (count === end) {
        clearInterval(interval);
      }
      return () => clearInterval(interval);
    }
  }, [isCounting, count, end]);

  return (
    <div className={classes.item} ref={targetRef}>
      <Typography variant="h4" color="primary">
        {count}
        <br></br>
        {views}
      </Typography>
    </div>
  );
};

const GridCounter = () => {
  const classes = useStyles();

  return (
    <div className={classes.container}>
      <Counter key={1} end={1000 * 550} />
    </div>
  );
};

export default GridCounter;
